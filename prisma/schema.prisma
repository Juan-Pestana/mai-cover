// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
  // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  role           Role      @default(user)
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
  letters        Letter[]
  Profile        Profile[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Letter {
  id      String   @id @default(cuid())
  content String   @db.Text
  profile Profile?
  offer   Offer?
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@index([userId])
}

model Profile {
  id         String  @id @default(cuid())
  abstract   String  @db.Text
  experience String  @db.Text
  training   String  @db.Text
  user       User    @relation(fields: [userId], references: [id])
  letter     Letter? @relation(fields: [letterId], references: [id])
  letterId   String  @unique
  userId     String

  @@index([letterId])
  @@index([userId])
}

model Offer {
  id           String  @id @default(cuid())
  company_name String
  offer_name   String
  offer        String  @db.Text
  letter       Letter? @relation(fields: [letterId], references: [id])
  letterId     String  @unique
}

enum Role {
  user
  admin
}
